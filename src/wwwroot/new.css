@layer reset, ux, root, layout, theme, components;
@layer components.a {
    a {
        place-items: center;
    }
    a:focus-visible {
        transition-duration: 0s;
        background-color: var(--accent-color-50);
    }

    li:has(a) {
        position: relative;

        & a:after {
            content: "";
            position: absolute;
            inset: 0;
            z-index: 1;
        }

        & a:focus-visible {
            background-color: initial;
        }

        &:has(:focus-visible) {
            transition-duration: 0s;
            background-color: var(--accent-color-75);
            box-shadow: 0 0 1rem var(--accent-color-75);
        }
    }
}
.breadcrumbs, .breadcrumbs nav, .breadcrumbs hgroup {
    gap: 0 0.5rem;
}
@layer components.buttoninput {

    button, input, label:has(>input), label[for], menu a, section a:not([href]), select, option {
        --button-color: var(--accent-color);
        --button-color-75: color-mix(in oklab, var(--button-color) 75%, var(--background-color));

        min-height: 2rem;
        color: var(--button-color);
        place-content: center;
        text-align: center;
        display: block;
        font-weight: 900;

        &:hover:not(:disabled), &:has(input:not(:disabled):checked) {
            background: var(--button-color);
            color: var(--color);
            box-shadow: inset 0 0 1rem var(--button-color), 0 0 1rem var(--button-color);
        }

        &:focus-visible {
            transition-duration: 0s;
            color: var(--color);
            background-color: var(--button-color-75);
        }
    }

    input:not([type=submit]):not([type=reset]):not([readonly]) {
        border: 0.25rem solid var(--background-color-70);

        &:hover:not(:disabled) {
            background-color: var(--background-color-80);
            border: 0.25rem solid var(--accent-color);
        }
    }
}

input[type=number]::-webkit-inner-spin-button,
input[type=number]::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

@layer components.details {
    *:not([open])::details-content {
        translate: 0 -.5rem;
        opacity: 0;
    }
}

body:has(dialog[open]) {
    filter: blur(5rem);
}
@layer components.empty {
    
    *:not(:has(*)) {
        display: initial;
    }
}
@layer components.footer {

    body>footer {
        display: grid;
        overflow-y: hidden;
        min-height: 1rem;
    }

    @media(min-width: 120ch) {
        body>footer {
            display: flex;
            gap: 0 2ch;

            & * {
                text-wrap: nowrap;
            }

            &>*:last-of-type {
                flex: 1;
                text-align: right;
            }
        }
    }
}
@layer components.form {
    main form input[type]:not([type=number]):not([type=date]):not(:hover), main form label:has(>input[type=radio]:not(:checked)):not(:hover) {
        background: var(--background-color-80);
    }
}

body:has([fullscreen-viewer]) > *:not([fullscreen-viewer]) {
    display: none;
}

html:has([fullscreen-viewer]) {
    scrollbar-gutter: auto;
}

body:has([fullscreen-viewer]) {
    display: grid;
    grid-template-rows: initial;
    grid-template: "fullscreen-viewer";
    height: 100%;
    place-items: stretch;
    margin-top: 0px;
    background: black;
    overflow: hidden;
}

[fullscreen-viewer] {
    display: grid;
    grid-area: fullscreen-viewer;
    width: 100cqw;
    height: 100cqh;
}
@layer components.header {

    body>header {
        font-size: 2rem;
        padding-inline: 1rem;
        display: grid;
        grid-auto-flow: column;
        grid-template-columns: min-content 1fr;
        color: oklab(from var(--accent-color) l a b / 0.5);
        gap: 0 1rem;

        &>hgroup {
            display: flex;
            gap: 0 1rem;
            place-items: center;
        }

        &>nav {
            display: flex;
            gap: 0 1rem;
            flex-wrap: wrap;
            overflow: hidden;
        }

        & a {
            line-height: 2rem;
            color: oklab(from var(--color) l a b / 0.4);
            overflow: hidden;
            text-overflow: clip;

            &:hover {
                color: oklab(from var(--color) l a b / 0.8);
                overflow: visible;
            }

            &:focus-visible {
                box-shadow: 0 0 1rem var(--accent-color);
                padding-inline: 0.5rem;
                margin-inline: -0.5rem;
                color: var(--color);
                overflow: visible;
            }
        }

        & a[aria-current="page"], hgroup a {
            color: oklab(from var(--accent-color) l a b / 0.8);

            &:hover {
                color: oklab(from var(--accent-color) l a b / 1);
            }

            &:focus-visible {
                color: var(--color);
            }
        }
    }
}
@layer components.section {
    menu, li {
        place-content: stretch;
    }

    main > section {
        /*font-weight: 100;*/
    }

        main > section code {
            font-size: 0.5rem;
            font-weight: 100;
        }

            main > section code::before {
                content: "embed code: ";
                font-size: 1rem;
            }

        main > section > ul:not([class]) > li > [src$=".svg"]:first-of-type {
            grid-column: 2;
            place-self: center;
        }

        main > section > ul:not([class]) > li > *:not([src$=".svg"]):not(header):first-child {
            grid-column: 3;
        }

        main > section > ul > li > section a {
            &, * {
                display: initial;
            }
        }

        main > section > ul[empty] {
            > li, > li * {
                text-align: center;
                align-content: center;
                opacity: 0.7;
                font-style: italic;
                font-weight: 100;
            }
        }

        main > section menu {
            display: flex;
            justify-self: end;
        }

            main > section li:not(:hover) menu {
                opacity: 0.1;
            }

        main > section menu > li {
            min-width: 2rem;
            text-align: center;
        }

            main > section menu > li:not(:hover) {
                opacity: 0.7;
            }

            main > section menu a:hover {
                background-color: var(--accent-color);
            }

            main > section menu > li button:not(:hover) {
                background-color: transparent;
            }

    menu:has(a), menu:has(button) {
        z-index: 2;
    }
}


ul.with-icon {
    grid-template-columns: 1fr;
    place-items: stretch;

    & > li {
        grid-template-columns: 2rem 1fr auto;
        place-items: stretch;

        & > *:not(img[src$=".svg"]):not(.icon):first-child {
            grid-column: 2;
        }

        & > section {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem 1ch;
            padding-inline-end: 0.5rem;

            & > *:first-child {
            flex-grow: 1;
            }
        }
    }
}

ul.without-icon {

    grid-template-columns: 1fr;
    place-items: stretch;

    & > li {
        grid-template-columns: 1fr auto;
        place-items: stretch;

        & > section {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem 1ch;
            padding-inline-start: 0.5rem;
            padding-inline-end: 0.5rem;

            & > *:first-child {
            flex-grow: 1;
            }
        }
    }
}
@layer components.selectoptions {
    option {
        background-color: var(--background-color);
        color: var(--accent-color);
    }

}

@layer components.tags {
    .tags {
        display: flex;
        gap: 0.5rem 1ch;

        flex-wrap: wrap;
        height: 1rem;
        place-self: center end;

        overflow: clip;

        & > li {

            &:not(:empty) {
                background-color: var(--accent-color-50);
                color: var(--background-color);
                padding-block: 0.25rem;
                padding-inline: 0.5rem;
                font-size: 0.625rem;
                font-weight: 900;
                text-align: center;
                text-wrap: nowrap;
                flex: 1;
            }
        }
    }

    li:has(:hover, :focus-visible) .tags li {
        background-color: var(--accent-color);
    }
}
@layer layout {
    html, body {
        display: grid;
        place-content: stretch;

        min-height: 100%;
    }
    
    html {
        user-select: none;

    }

    body {
        grid-template-rows: auto minmax(0, 1fr);
    }

    html:has(main.fit-screen), body:has(main.fit-screen) {
        @media (aspect-ratio > 1) {
            height: 100%;
        }
    }

    header {
        app-region: drag;

        & a {
            app-region: no-drag;
        }
    }

    main {
        margin: 2rem 0;
        @media (aspect-ratio > 1) {
            margin: 1rem;
        }
        place-self: start stretch;

        display: grid;
        grid-template-columns: 1fr;
        grid-auto-rows: minmax(min-content, 2rem);
        gap: 1rem;

        &>:last-of-type {
            place-self: end;
        }

        & * {
            display: grid;
            grid-template-columns: subgrid;
            grid-column: 1 / -1;
        }

        &>section {
            place-content: stretch;

            &>ul>li a {
                text-wrap: nowrap;
                text-overflow: ellipsis;
                overflow: hidden;    
            }

            &>*:not(header) {
                background-color: var(--background-color);
            }

            &>header {
                width: max-content;
                height: 2rem;
                place-content: center;
                contain: layout;
                padding-inline: 1rem;
            }

            &>ul>li {
                min-height: 2rem;

                &>* {
                    grid-column: span 1;
                }
            }
        }
    }
}
@layer reset {

    :root {
        interpolate-size: allow-keywords;
    }

    @view-transition {
        navigation: auto;
    }

    :is(*, :after, :before) {
        margin: 0;
        padding: 0;
        line-height: 100%;
        box-sizing: border-box;
        place-content: center start;
        outline: none;
        border: none;
        background-color: transparent;
    }

    a {
        text-decoration-color: transparent;
        cursor: pointer;
    }

    li {
        list-style-type: none;
    }

    input,
    button {
        font-family: inherit;
        font-size: inherit;
        border: inherit;
    }

    progress {
        pointer-events: none;
    }

    img[src$=".svg"] {
        width: 1rem;
        place-self: center;
    }

    script, style, head, meta, base, title, link {
        display: none !important;
    }
}
@layer root {

    :root {
        --background-color-90: color-mix(in oklab, var(--background-color) 90%, var(--color));
        --background-color-80: color-mix(in oklab, var(--background-color) 80%, var(--color));
        --background-color-70: color-mix(in oklab, var(--background-color) 70%, var(--color));

        --accent-color-75: color-mix(in oklab, var(--accent-color) 75%, var(--background-color));
        --accent-color-50: color-mix(in oklab, var(--accent-color) 50%, var(--background-color));
        --accent-color-25: color-mix(in oklab, var(--accent-color) 25%, var(--background-color));

        --color-90: color-mix(in oklab, var(--color) 90%, var(--background-color));
        --color-80: color-mix(in oklab, var(--color) 80%, var(--background-color));
        --color-70: color-mix(in oklab, var(--color) 70%, var(--background-color));
        --color-50: color-mix(in oklab, var(--color) 50%, var(--background-color));

        --accent-color: green;
        --warning-color: yellow;
        --danger-color: red;

        @media(prefers-color-scheme: light) {
            --color: black;
            --background-color: white;
            --accent-color: color-mix(in oklab, springgreen 65%, black);
            --warning-color: color-mix(in oklab, #fadc00 75%, black);
            --danger-color: color-mix(in oklab, #ff0565 85%, black);
        }

        @media (prefers-color-scheme: dark) {
            --color: white;
            --background-color: black;
            --accent-color: mediumspringgreen;
            --warning-color: #fadc00;
            --danger-color: #ff0565;
        }
    }
}
@layer theme {
    html {
        font-family: ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;
        font-size: 1.5rem;
        color-scheme: dark light;
        background-color: var(--background-color);
        color: var(--color);
        caret-color: var(--accent-color);
    }

    body {
        background-color: var(--accent-color-50);

        &> :is(header, footer, main > *) {
            background: var(--background-color);
        }
    }

    body > footer, body > footer * {
        color: var(--color-70);
    }

    a {
        color: var(--color);
    }

    [dangerous] {
        --accent-color: var(--danger-color);
    }

    ul>li {
        background-color: var(--background-color);

        &:nth-of-type(2n) {
            background-color: var(--background-color-80);
        }
    }

    section>header {
        background-color: var(--accent-color);
        color: var(--background-color);
        font-weight: bold;
    }

    @layer animation {
        :root {
            --transition: all 0.33s linear allow-discrete;
        }
        * {
            transition: var(--transition);
        }
            *::details-content {
                transition: var(--transition);
            }
            *:hover {
                transition-duration: 0s;
            }

        body:has(:hover) {
            overflow-x: clip;
        }

        button:hover {
            scale: 1.005;
            z-index: 1;
        }

        ul>li {
            -transition: all 0.33s linear, box-shadow 0.125s linear, scale 0.125s linear;

            &:hover, &:focus-within {
                box-shadow: 0 0 12rem rgba(0, 0, 0, 0.25), 0 0 1rem rgba(0, 0, 0, 0.75);
                scale: 1.005;
                z-index: 1;
            }
        }
    }

    @layer glow {
        :is(button, input):hover,
        :is(button, input):focus-visible {
            box-shadow: 0 0 1rem var(--button-color);
        }
    }

    @layer shadow {
/*        body>main {
            filter: drop-shadow(0 0 1rem black);
        }*/

        /* view-transitions make drop-shadow flicker, so let's fix it manually */
        body > main > section {
          position: relative;
  
          &[title] {
            &::before, &::after {  
              display: inline-block;
              width: max-content;
              height: 2rem;
              font-weight: 900;
              content: attr(title);
              padding-inline: 1rem;
              place-content: center;
              background: var(--accent-color);
              color: var(--background-color);
            }

            &::after {
              position: absolute;
              inset: 0;
              z-index: 1;
            }
          }

          & > *, &::before {
            box-shadow: 0 0 2rem rgba(0, 0, 0, 1);
            position: relative;
          }
        }
    }

    @layer browser.webkit {
        ::-webkit-scrollbar {
            width: 0.5rem;
            background-color: transparent;

            & * {
                background-color: transparent;
            }
        }

        ::-webkit-scrollbar-thumb {
            background-color: var(--accent-color-75);
            border: 0.125rem solid transparent;
            background-clip: padding-box;
            border-radius: 1rem;
            box-shadow: 0 0 5rem var(--accent-color);
        }

        progress {
            color: var(--accent-color);
            width: 100%;
            height: 100%;
            appearance: none;

            &::-webkit-progress-bar {
                background-color: transparent;
            }
        
            &::-webkit-progress-value {
                background: currentColor;
                box-shadow: 0 0 1rem currentColor;
                transition: 1s;
            }
        }
    }
}
@layer ux {

    @layer popover {
        [popover]:not(:popover-open) {
            display: none !important; /* this seems to actually be a usecase for important lol */
        }

        /* disable ability to click on items outside of the popover, if attribute captive is set */
        body:has([captive][popover]:popover-open) {
            pointer-events: none;
        }
        [captive]:popover-open {
            pointer-events: all;
        }
    }

    [inert] {
        opacity: 0.5;
    }

    [risky] {
        --accent-color: var(--warning-color);
    }

    [dangerous] {
        --accent-color: var(--danger-color);
    }

}